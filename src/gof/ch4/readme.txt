1. 适配器的常见实现
通常是一个类，一般会让适配器类去实现Target接口，然后在适配器的具体实现里面调用Adaptee
2. 智能适配器

3. 适配多个Adaptee
4. 适配器Adapter实现的复杂程度
5. 缺省适配

双向适配器


对象适配器：依赖于对象组合
类适配器：采用多重继承对一个接口与另一个接口进行匹配
	需要继承Class的实现，然后再去实现Interface接口
	按照继承Class的要求，提供构造方法
	不再需要Class的对象，其是Class 的一个子类
	ClassAdapter

类适配器和对象适配器的权衡：
1. 实现上：类，对象继承方式，静态的定义；对象，采用组合方式，动态的
2. 类适配器，继承实现，使得适配器不能与子类一起工作； 对象，采用的组合，没有这种限制
3. 类适配器，可以重新定义Adaptee部分行为（覆盖）；对象，重新定义行为比较困难，定义子类后再组合
4. 类，仅引入一个对象，对象，需要额外引用来间接得到

适配器： 更好的拓展和复用，但系统会凌乱，不易整体把握（调用接口A，却有接口B的实现）

何时使用：
1. 已存在类，接口不满足要求
2. 复用的类和不兼容的类一起工作
3. 已存在的子类，不能对每个子类适配，适配父类
